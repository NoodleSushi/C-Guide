{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to this C guide thing for pineapple class! yayyyyyyy","title":"Home"},{"location":"#welcome-to-this-c-guide-thing-for-pineapple-class","text":"yayyyyyyy","title":"Welcome to this C guide thing for pineapple class!"},{"location":"datatypes/","text":"Primary DataTypes Type Bytes Format Specifier char 1 %c int 4 %d long int 8 %ld float 4 %f double 8 %lf long double 16 %Lf User Defined DataTypes Type Bytes struct Sum of allocated bytes of every variable union Max allocated bytes of a variable","title":"Datatypes"},{"location":"datatypes/#primary-datatypes","text":"Type Bytes Format Specifier char 1 %c int 4 %d long int 8 %ld float 4 %f double 8 %lf long double 16 %Lf","title":"Primary DataTypes"},{"location":"datatypes/#user-defined-datatypes","text":"Type Bytes struct Sum of allocated bytes of every variable union Max allocated bytes of a variable","title":"User Defined DataTypes"},{"location":"enum/","text":"Enum enum enum_name { const1, // 0 const2, // 1 const3, // 2 const4, // 3 }; enum enum_name enum_var; enum enum_name { const1, // 0 const2, // 1 const3, // 2 const4, // 3 } optional_enum_var; typedef enum optional_enum_name { const1, // 0 const2, // 1 const3, // 2 const4, // 3 } enum_name; enum optional_enum_name my_enum1; enum_name my_enum2; enum my_enum { //value| increment const_01, // 0 | 0 + 0 \u2b0e const_02, // 1 | 0 + 1 \u2193 const_03, // 2 | 0 + 2 \u2193 const_04, // 3 | 0 + 3 \u2193 const_05 = 5, // 5 | 5 + 0 \u2b0e const_06, // 6 | 5 + 1 \u2193 const_07, // 7 | 5 + 2 \u2193 const_08, // 8 | 5 + 3 \u2193 const_09 = 1, // 1 | 1 + 0 const_10 = 3, // 3 | 3 + 0 const_11 = 6, // 6 | 6 + 0 \u2b0e const_12, // 7 | 6 + 1 \u2193 const_13, // 8 | 6 + 2 \u2193 const_14, // 9 | 6 + 3 \u2193 };","title":"Enum"},{"location":"enum/#enum","text":"enum enum_name { const1, // 0 const2, // 1 const3, // 2 const4, // 3 }; enum enum_name enum_var; enum enum_name { const1, // 0 const2, // 1 const3, // 2 const4, // 3 } optional_enum_var; typedef enum optional_enum_name { const1, // 0 const2, // 1 const3, // 2 const4, // 3 } enum_name; enum optional_enum_name my_enum1; enum_name my_enum2; enum my_enum { //value| increment const_01, // 0 | 0 + 0 \u2b0e const_02, // 1 | 0 + 1 \u2193 const_03, // 2 | 0 + 2 \u2193 const_04, // 3 | 0 + 3 \u2193 const_05 = 5, // 5 | 5 + 0 \u2b0e const_06, // 6 | 5 + 1 \u2193 const_07, // 7 | 5 + 2 \u2193 const_08, // 8 | 5 + 3 \u2193 const_09 = 1, // 1 | 1 + 0 const_10 = 3, // 3 | 3 + 0 const_11 = 6, // 6 | 6 + 0 \u2b0e const_12, // 7 | 6 + 1 \u2193 const_13, // 8 | 6 + 2 \u2193 const_14, // 9 | 6 + 3 \u2193 };","title":"Enum"},{"location":"struct/","text":"Struct struct struct_name { datatype variable_1; datatype variable_2; datatype variable_3; ... };","title":"Struct"},{"location":"struct/#struct","text":"struct struct_name { datatype variable_1; datatype variable_2; datatype variable_3; ... };","title":"Struct"},{"location":"Headers/ctype/","text":"ctype.h Methods Return Method int isalpha( int c ) int isdigit( int c ) int ispunct( int c ) int isspace( int c ) int isupper( int c ) int islower( int c ) int toupper( int c ) int tolower( int c ) Method Descriptions int isalpha( int c ) Checks whether the passed character is alphabetic. int isdigit( int c ) Checks whether the passed character is decimal digit. int ispunct( int c ) Checks whether the passed character is a punctuation character. int isspace( int c ) Checks whether the passed character is white-space. int isupper( int c ) Checks whether the passed character is an uppercase letter. int islower( int c ) Checks whether the passed character is lowercase letter. int toupper( int c ) Converts lowercase letters to uppercase. int tolower( int c ) Converts uppercase letters to lowercase.","title":"ctype.h"},{"location":"Headers/ctype/#ctypeh","text":"","title":"ctype.h"},{"location":"Headers/ctype/#methods","text":"Return Method int isalpha( int c ) int isdigit( int c ) int ispunct( int c ) int isspace( int c ) int isupper( int c ) int islower( int c ) int toupper( int c ) int tolower( int c )","title":"Methods"},{"location":"Headers/ctype/#method-descriptions","text":"int isalpha( int c ) Checks whether the passed character is alphabetic. int isdigit( int c ) Checks whether the passed character is decimal digit. int ispunct( int c ) Checks whether the passed character is a punctuation character. int isspace( int c ) Checks whether the passed character is white-space. int isupper( int c ) Checks whether the passed character is an uppercase letter. int islower( int c ) Checks whether the passed character is lowercase letter. int toupper( int c ) Converts lowercase letters to uppercase. int tolower( int c ) Converts uppercase letters to lowercase.","title":"Method Descriptions"},{"location":"Headers/full-reference/","text":"Full Reference // Standard Input Output #include <stdio.h> int printf(const char *format, ...); int scanf(const char *format, ...); int puts(const char *str); char *gets(char *str); FILE *fopen(const char *filename, const char *mode); int fclose(FILE *stream); size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream); size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream); int fseek(FILE *stream, long int offset, int whence); long int ftell(FILE *stream); void rewind(FILE *stream); // Standard Library #include <stdlib.h> void *malloc(size_t size); void *calloc(size_t n_items, size_t size); void *realloc(void *ptr, size_t size); void free(void *ptr); // String #include <string.h> void *memcpy(void *dest, const void *src, size_t n); size_t strlen(const char *str); int strcmp(const char *str1, const char *str2); char *strcpy(char *dest, const char *src); char *strcat(char *dest, const char *src); char *strrev(char *str); // Character Type #include <ctype.h> int isalpha(int c); int isdigit(int c); int ispunct(int c); int isspace(int c); int isupper(int c); int islower(int c); int toupper(int c); int tolower(int c);","title":"Full Reference"},{"location":"Headers/full-reference/#full-reference","text":"// Standard Input Output #include <stdio.h> int printf(const char *format, ...); int scanf(const char *format, ...); int puts(const char *str); char *gets(char *str); FILE *fopen(const char *filename, const char *mode); int fclose(FILE *stream); size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream); size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream); int fseek(FILE *stream, long int offset, int whence); long int ftell(FILE *stream); void rewind(FILE *stream); // Standard Library #include <stdlib.h> void *malloc(size_t size); void *calloc(size_t n_items, size_t size); void *realloc(void *ptr, size_t size); void free(void *ptr); // String #include <string.h> void *memcpy(void *dest, const void *src, size_t n); size_t strlen(const char *str); int strcmp(const char *str1, const char *str2); char *strcpy(char *dest, const char *src); char *strcat(char *dest, const char *src); char *strrev(char *str); // Character Type #include <ctype.h> int isalpha(int c); int isdigit(int c); int ispunct(int c); int isspace(int c); int isupper(int c); int islower(int c); int toupper(int c); int tolower(int c);","title":"Full Reference"},{"location":"Headers/stdio/","text":"stdio.h Methods Return Method int printf( const char *format, ... ) int scanf( const char *format, ... ) int puts( const char *str ) char* gets( char *str ) FILE* fopen( const char *filename, const char *mode ) int fclose( FILE *stream ) size_t fread( void *ptr, size_t size, size_t nmemb, FILE *stream ) size_t fwrite( const void *ptr, size_t size, size_t nmemb, FILE *stream ) int fseek( FILE *stream, long int offset, int whence ) long int ftell( FILE *stream ) void rewind( FILE *stream ) Method Descriptions int printf( const char *format, ... ) Sends formatted output to stdout. int scanf( const char *format, ... ) Reads formatted input from stdin. int puts( const char *str ) Writes a string to stdout up to but not including the null character. A newline character is appended to the output. char *gets( char *str ) Reads a line from stdin and stores it into the string pointed to by, str. It stops when either the newline character is read or when the end-of-file is reached, whichever comes first. FILE *fopen( const char *filename, const char *mode ) Opens the filename pointed to by filename using the given mode. int fclose( FILE *stream ) Closes the stream. All buffers are flushed. size_t fread( void *ptr, size_t size, size_t nmemb, FILE *stream ) Reads data from the given stream into the array pointed to by ptr. size_t fwrite( const void *ptr, size_t size, size_t nmemb, FILE *stream ) Writes data from the array pointed to by ptr to the given stream. int fseek( FILE *stream, long int offset, int whence ) Sets the file position of the stream to the given offset. long int ftell( FILE *stream ) Returns the current file position of the given stream. void rewind( FILE *stream ) Sets the file position to the beginning of the file of the given stream.","title":"stdio.h"},{"location":"Headers/stdio/#stdioh","text":"","title":"stdio.h"},{"location":"Headers/stdio/#methods","text":"Return Method int printf( const char *format, ... ) int scanf( const char *format, ... ) int puts( const char *str ) char* gets( char *str ) FILE* fopen( const char *filename, const char *mode ) int fclose( FILE *stream ) size_t fread( void *ptr, size_t size, size_t nmemb, FILE *stream ) size_t fwrite( const void *ptr, size_t size, size_t nmemb, FILE *stream ) int fseek( FILE *stream, long int offset, int whence ) long int ftell( FILE *stream ) void rewind( FILE *stream )","title":"Methods"},{"location":"Headers/stdio/#method-descriptions","text":"int printf( const char *format, ... ) Sends formatted output to stdout. int scanf( const char *format, ... ) Reads formatted input from stdin. int puts( const char *str ) Writes a string to stdout up to but not including the null character. A newline character is appended to the output. char *gets( char *str ) Reads a line from stdin and stores it into the string pointed to by, str. It stops when either the newline character is read or when the end-of-file is reached, whichever comes first. FILE *fopen( const char *filename, const char *mode ) Opens the filename pointed to by filename using the given mode. int fclose( FILE *stream ) Closes the stream. All buffers are flushed. size_t fread( void *ptr, size_t size, size_t nmemb, FILE *stream ) Reads data from the given stream into the array pointed to by ptr. size_t fwrite( const void *ptr, size_t size, size_t nmemb, FILE *stream ) Writes data from the array pointed to by ptr to the given stream. int fseek( FILE *stream, long int offset, int whence ) Sets the file position of the stream to the given offset. long int ftell( FILE *stream ) Returns the current file position of the given stream. void rewind( FILE *stream ) Sets the file position to the beginning of the file of the given stream.","title":"Method Descriptions"},{"location":"Headers/stdlib/","text":"stdlib.h Methods Return Method void* malloc( size_t size ) void* calloc( size_t n_items, size_t size ) void* realloc( void *ptr, size_t size ) void free( void *ptr ) Method Descriptions void *malloc( size_t size ) Allocates the requested memory and returns a pointer to it. void *calloc( size_t n_items, size_t size ) Allocates the requested memory and returns a pointer to it. void *realloc( void *ptr, size_t size ) Attempts to resize the memory block pointed to by ptr that was previously allocated with a call to malloc or calloc. void free( void *ptr ) Deallocates the memory previously allocated by a call to calloc, malloc, or realloc.","title":"stdlib.h"},{"location":"Headers/stdlib/#stdlibh","text":"","title":"stdlib.h"},{"location":"Headers/stdlib/#methods","text":"Return Method void* malloc( size_t size ) void* calloc( size_t n_items, size_t size ) void* realloc( void *ptr, size_t size ) void free( void *ptr )","title":"Methods"},{"location":"Headers/stdlib/#method-descriptions","text":"void *malloc( size_t size ) Allocates the requested memory and returns a pointer to it. void *calloc( size_t n_items, size_t size ) Allocates the requested memory and returns a pointer to it. void *realloc( void *ptr, size_t size ) Attempts to resize the memory block pointed to by ptr that was previously allocated with a call to malloc or calloc. void free( void *ptr ) Deallocates the memory previously allocated by a call to calloc, malloc, or realloc.","title":"Method Descriptions"},{"location":"Headers/string/","text":"string.h Methods Return Method void* memcpy( void *dest, const void *src, size_t n ) size_t strlen( const char *str ) int strcmp( const char *str1, const char *str2 ) char* strcpy( char *dest, const char *src ) char* strcat( char *dest, const char *src ) char* strrev( char *str ) Method Descriptions void *memcpy( void *dest, const void *src, size_t n ) Copies n characters from src to dest. size_t strlen( const char *str ) Computes the length of the string str up to but not including the terminating null character. int strcmp( const char *str1, const char *str2 ) Compares the string pointed to, by str1 to the string pointed to by str2. char *strcpy( char *dest, const char *src ) Copies the string pointed to, by src to dest. char *strcat( char *dest, const char *src ) Appends the string pointed to, by src to the end of the string pointed to by dest. char *strrev( char *str ) Reverses the string.","title":"string.h"},{"location":"Headers/string/#stringh","text":"","title":"string.h"},{"location":"Headers/string/#methods","text":"Return Method void* memcpy( void *dest, const void *src, size_t n ) size_t strlen( const char *str ) int strcmp( const char *str1, const char *str2 ) char* strcpy( char *dest, const char *src ) char* strcat( char *dest, const char *src ) char* strrev( char *str )","title":"Methods"},{"location":"Headers/string/#method-descriptions","text":"void *memcpy( void *dest, const void *src, size_t n ) Copies n characters from src to dest. size_t strlen( const char *str ) Computes the length of the string str up to but not including the terminating null character. int strcmp( const char *str1, const char *str2 ) Compares the string pointed to, by str1 to the string pointed to by str2. char *strcpy( char *dest, const char *src ) Copies the string pointed to, by src to dest. char *strcat( char *dest, const char *src ) Appends the string pointed to, by src to the end of the string pointed to by dest. char *strrev( char *str ) Reverses the string.","title":"Method Descriptions"}]}