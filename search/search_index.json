{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"C Guide Home Datatypes ASCII Table Operator Precedence and Associativity Headers stdio.h stdlib.h string.h ctype.h Enum Struct Written by NoodleSushi Notes Provided by Caitlin Lindsay Resources from Tutorialspoint and Programiz","title":"Home"},{"location":"#c-guide","text":"Home Datatypes ASCII Table Operator Precedence and Associativity Headers stdio.h stdlib.h string.h ctype.h Enum Struct Written by NoodleSushi Notes Provided by Caitlin Lindsay Resources from Tutorialspoint and Programiz","title":"C Guide"},{"location":"ascii-table/","text":"ASCII Table ASCII Control Characters Decimal Character 00 [NULL] 01 [START OF HEADING] 02 [START OF TEXT] 03 [END OF TEXT] 04 [END OF TRANSMISSION] 05 [ENQUIRY] 06 [ACKNOWLEDGE] 07 [BELL] 08 [BACKSPACE] 09 [HORIZONTAL TAB] 10 [LINE FEED] 11 [VERTICAL TAB] 12 [FORM FEED] 13 [CARRIAGE RETURN] 14 [SHIFT OUT] 15 [SHIFT IN] 16 [DATA LINK ESCAPE] 17 [DEVICE CONTROL 1] 18 [DEVICE CONTROL 2] 19 [DEVICE CONTROL 3] 20 [DEVICE CONTROL 4] 21 [NEGATIVE ACKNOWLEDGE] 22 [SYNCHRONOUS IDLE] 23 [ENG OF TRANS BLOCK] 24 [CANCEL] 25 [END OF MEDIUM] 26 [SUBSTITUTE] 27 [ESCAPE] 28 [FILE SEPARATOR] 29 [GROUP SEPARATOR] 30 [RECORD SEPARATOR] 31 [UNIT SEPARATOR] ASCII Printable Characters Decimal Character 32 [SPACE] 33 '!' 34 '\"' 35 '#' 36 '$' 37 '%' 38 '&' 39 '\\'' 40 '(' 41 ')' 42 '*' 43 '+' 44 ',' 45 '-' 46 '.' 47 '/' 48 '0' 49 '1' 50 '2' 51 '3' 52 '4' 53 '5' 54 '6' 55 '7' 56 '8' 57 '9' 58 ':' 59 ';' 60 '<' 61 '=' 62 '>' 63 '?' 64 '@' 65 'A' 66 'B' 67 'C' 68 'D' 69 'E' 70 'F' 71 'G' 72 'H' 73 'I' 74 'J' 75 'K' 76 'L' 77 'M' 78 'N' 79 'O' 80 'P' 81 'Q' 82 'R' 83 'S' 84 'T' 85 'U' 86 'V' 87 'W' 88 'X' 89 'Y' 90 'Z' 91 '[' 92 '\\\\' 93 ']' 94 '^' 95 '_' 96 '`' 97 'a' 98 'b' 99 'c' 100 'd' 101 'e' 102 'f' 103 'g' 104 'h' 105 'i' 106 'j' 107 'k' 108 'l' 109 'm' 110 'n' 111 'o' 112 'p' 113 'q' 114 'r' 115 's' 116 't' 117 'u' 118 'v' 119 'w' 120 'x' 121 'y' 122 'z' 123 '{' 124 '|' 125 '}' 126 '~' 127 DELETE","title":"ASCII Table"},{"location":"ascii-table/#ascii-table","text":"","title":"ASCII Table"},{"location":"ascii-table/#ascii-control-characters","text":"Decimal Character 00 [NULL] 01 [START OF HEADING] 02 [START OF TEXT] 03 [END OF TEXT] 04 [END OF TRANSMISSION] 05 [ENQUIRY] 06 [ACKNOWLEDGE] 07 [BELL] 08 [BACKSPACE] 09 [HORIZONTAL TAB] 10 [LINE FEED] 11 [VERTICAL TAB] 12 [FORM FEED] 13 [CARRIAGE RETURN] 14 [SHIFT OUT] 15 [SHIFT IN] 16 [DATA LINK ESCAPE] 17 [DEVICE CONTROL 1] 18 [DEVICE CONTROL 2] 19 [DEVICE CONTROL 3] 20 [DEVICE CONTROL 4] 21 [NEGATIVE ACKNOWLEDGE] 22 [SYNCHRONOUS IDLE] 23 [ENG OF TRANS BLOCK] 24 [CANCEL] 25 [END OF MEDIUM] 26 [SUBSTITUTE] 27 [ESCAPE] 28 [FILE SEPARATOR] 29 [GROUP SEPARATOR] 30 [RECORD SEPARATOR] 31 [UNIT SEPARATOR]","title":"ASCII Control Characters"},{"location":"ascii-table/#ascii-printable-characters","text":"Decimal Character 32 [SPACE] 33 '!' 34 '\"' 35 '#' 36 '$' 37 '%' 38 '&' 39 '\\'' 40 '(' 41 ')' 42 '*' 43 '+' 44 ',' 45 '-' 46 '.' 47 '/' 48 '0' 49 '1' 50 '2' 51 '3' 52 '4' 53 '5' 54 '6' 55 '7' 56 '8' 57 '9' 58 ':' 59 ';' 60 '<' 61 '=' 62 '>' 63 '?' 64 '@' 65 'A' 66 'B' 67 'C' 68 'D' 69 'E' 70 'F' 71 'G' 72 'H' 73 'I' 74 'J' 75 'K' 76 'L' 77 'M' 78 'N' 79 'O' 80 'P' 81 'Q' 82 'R' 83 'S' 84 'T' 85 'U' 86 'V' 87 'W' 88 'X' 89 'Y' 90 'Z' 91 '[' 92 '\\\\' 93 ']' 94 '^' 95 '_' 96 '`' 97 'a' 98 'b' 99 'c' 100 'd' 101 'e' 102 'f' 103 'g' 104 'h' 105 'i' 106 'j' 107 'k' 108 'l' 109 'm' 110 'n' 111 'o' 112 'p' 113 'q' 114 'r' 115 's' 116 't' 117 'u' 118 'v' 119 'w' 120 'x' 121 'y' 122 'z' 123 '{' 124 '|' 125 '}' 126 '~' 127 DELETE","title":"ASCII Printable Characters"},{"location":"datatypes/","text":"Primary DataTypes Type Bytes Format Specifier char 1 %c int 4 %d long int 8 %ld float 4 %f double 8 %lf long double 16 %Lf User Defined DataTypes Type Bytes struct Sum of allocated bytes of every variable union Max allocated bytes of a variable","title":"Datatypes"},{"location":"datatypes/#primary-datatypes","text":"Type Bytes Format Specifier char 1 %c int 4 %d long int 8 %ld float 4 %f double 8 %lf long double 16 %Lf","title":"Primary DataTypes"},{"location":"datatypes/#user-defined-datatypes","text":"Type Bytes struct Sum of allocated bytes of every variable union Max allocated bytes of a variable","title":"User Defined DataTypes"},{"location":"enum/","text":"Enum enum enum_name { const1 , // 0 const2 , // 1 const3 , // 2 const4 , // 3 }; enum enum_name enum_var ; enum enum_name { const1 , // 0 const2 , // 1 const3 , // 2 const4 , // 3 } optional_enum_var ; typedef enum optional_enum_name { const1 , // 0 const2 , // 1 const3 , // 2 const4 , // 3 } enum_name ; enum optional_enum_name my_enum1 ; enum_name my_enum2 ; enum my_enum { //value| increment const_01 , // 0 | 0 + 0 \u2b0e const_02 , // 1 | 0 + 1 \u2193 const_03 , // 2 | 0 + 2 \u2193 const_04 , // 3 | 0 + 3 \u2193 const_05 = 5 , // 5 | 5 + 0 \u2b0e const_06 , // 6 | 5 + 1 \u2193 const_07 , // 7 | 5 + 2 \u2193 const_08 , // 8 | 5 + 3 \u2193 const_09 = 1 , // 1 | 1 + 0 const_10 = 3 , // 3 | 3 + 0 const_11 = 6 , // 6 | 6 + 0 \u2b0e const_12 , // 7 | 6 + 1 \u2193 const_13 , // 8 | 6 + 2 \u2193 const_14 , // 9 | 6 + 3 \u2193 };","title":"Enum"},{"location":"enum/#enum","text":"enum enum_name { const1 , // 0 const2 , // 1 const3 , // 2 const4 , // 3 }; enum enum_name enum_var ; enum enum_name { const1 , // 0 const2 , // 1 const3 , // 2 const4 , // 3 } optional_enum_var ; typedef enum optional_enum_name { const1 , // 0 const2 , // 1 const3 , // 2 const4 , // 3 } enum_name ; enum optional_enum_name my_enum1 ; enum_name my_enum2 ; enum my_enum { //value| increment const_01 , // 0 | 0 + 0 \u2b0e const_02 , // 1 | 0 + 1 \u2193 const_03 , // 2 | 0 + 2 \u2193 const_04 , // 3 | 0 + 3 \u2193 const_05 = 5 , // 5 | 5 + 0 \u2b0e const_06 , // 6 | 5 + 1 \u2193 const_07 , // 7 | 5 + 2 \u2193 const_08 , // 8 | 5 + 3 \u2193 const_09 = 1 , // 1 | 1 + 0 const_10 = 3 , // 3 | 3 + 0 const_11 = 6 , // 6 | 6 + 0 \u2b0e const_12 , // 7 | 6 + 1 \u2193 const_13 , // 8 | 6 + 2 \u2193 const_14 , // 9 | 6 + 3 \u2193 };","title":"Enum"},{"location":"operator-precedence-and-associativity/","text":"Level Operators Description Associativity 15 () [] -> . ++ -- Parenthesis Array Subscript Structure Member Selectors Postfix Increment/Decrement \u2192 14 ++ -- + - ! ~ (type) * & sizeof Prefix Increment/Decrement Unary Plus/Minus Logical Negation/Bitwise Complement Cast Operator Dereference Address of Size in bytes \u2190 13 * / % Multiplication/Division/Modulo \u2192 12 + - Addiction/Subtraction \u2192 11 >> << Bitwise Right Shift Bitwise Left Shift \u2192 10 < <= > >= Relational Less than/Less than or Equal to Relational Greater than//Greater than or Equal to \u2192 9 == != Relational Equality Relational Not Equal \u2192 8 & Bitwise AND \u2192 7 ^ Bitwise XOR \u2192 6 | Bitwise OR \u2192 5 && Logical AND \u2192 4 || Logical OR \u2192 3 ?: Conditional Operator (Ternary) \u2190 2 = *= /= %/ += -= &= ^= |= <<= >>= Assigment Operators \u2190 1 , Comma Operator \u2192","title":"Operator Precedence and Associativity"},{"location":"struct/","text":"Struct struct struct_name { datatype variable_1 ; datatype variable_2 ; datatype variable_3 ; ... };","title":"Struct"},{"location":"struct/#struct","text":"struct struct_name { datatype variable_1 ; datatype variable_2 ; datatype variable_3 ; ... };","title":"Struct"},{"location":"Headers/ctype/","text":"ctype.h Methods Return Method int isalnum ( int c ) int isalpha ( int c ) int isdigit ( int c ) int ispunct ( int c ) int isspace ( int c ) int isupper ( int c ) int islower ( int c ) int toupper ( int c ) int tolower ( int c ) Method Descriptions int isalnum ( int c ) Checks whether c is alphabetic or numeric, A-Z , a-z or 0-9 . Returns 1 if so, returns 0 otherwise. int isalpha ( int c ) Checks whether c is alphabetic, A-Z or a-z . Returns 1 if so, returns 0 otherwise. int isdigit ( int c ) Checks whether c is a decimal digit, 0-9 . Returns 1 if so, returns 0 otherwise. int ispunct ( int c ) Checks whether c is a punctuation character found below. ! \" # $ % & ' ( ) * + , - . / : ; < = > ? @ [ \\ ] ^ _ ` { | } ~ Returns 1 if so, returns 0 otherwise. int isspace ( int c ) Checks whether c is a white-space character found below. \\t \\n \\v \\f \\r Returns 1 if so, returns 0 otherwise. int isupper ( int c ) Checks whether c is an uppercase letter, A-Z . Returns 1 if so, returns 0 otherwise. int islower ( int c ) Checks whether c is a lowercase letter, a-z . Returns 1 if so, returns 0 otherwise. int toupper ( int c ) Returns an uppercase equivalent of c . Returns c if not alphabetic. int tolower ( int c ) Returns a lowercase equivalent of c . Returns c if not alphabetic.","title":"ctype.h"},{"location":"Headers/ctype/#ctypeh","text":"","title":"ctype.h"},{"location":"Headers/ctype/#methods","text":"Return Method int isalnum ( int c ) int isalpha ( int c ) int isdigit ( int c ) int ispunct ( int c ) int isspace ( int c ) int isupper ( int c ) int islower ( int c ) int toupper ( int c ) int tolower ( int c )","title":"Methods"},{"location":"Headers/ctype/#method-descriptions","text":"int isalnum ( int c ) Checks whether c is alphabetic or numeric, A-Z , a-z or 0-9 . Returns 1 if so, returns 0 otherwise. int isalpha ( int c ) Checks whether c is alphabetic, A-Z or a-z . Returns 1 if so, returns 0 otherwise. int isdigit ( int c ) Checks whether c is a decimal digit, 0-9 . Returns 1 if so, returns 0 otherwise. int ispunct ( int c ) Checks whether c is a punctuation character found below. ! \" # $ % & ' ( ) * + , - . / : ; < = > ? @ [ \\ ] ^ _ ` { | } ~ Returns 1 if so, returns 0 otherwise. int isspace ( int c ) Checks whether c is a white-space character found below. \\t \\n \\v \\f \\r Returns 1 if so, returns 0 otherwise. int isupper ( int c ) Checks whether c is an uppercase letter, A-Z . Returns 1 if so, returns 0 otherwise. int islower ( int c ) Checks whether c is a lowercase letter, a-z . Returns 1 if so, returns 0 otherwise. int toupper ( int c ) Returns an uppercase equivalent of c . Returns c if not alphabetic. int tolower ( int c ) Returns a lowercase equivalent of c . Returns c if not alphabetic.","title":"Method Descriptions"},{"location":"Headers/full-reference/","text":"Full Reference // Standard Input Output #include <stdio.h> // Console Output int printf ( const char * format , ...); int puts ( const char * str ); // Console Input int scanf ( const char * format , ...); char * gets ( char * str ); // File Functions FILE * fopen ( const char * filename , const char * mode ); int fclose ( FILE * stream ); // File Writing size_t fwrite ( const void * ptr , size_t size , size_t nmemb , FILE * stream ); int fprintf ( FILE * stream , const char * format , ...); int fputc ( int char , FILE * stream ); // or putc int fputs ( const char * str , FILE * stream ); // File Reading size_t fread ( void * ptr , size_t size , size_t nmemb , FILE * stream ); int fscanf ( FILE * stream , const char * format , ...); int fgetc ( FILE * stream ); // or getc char * fgets ( char * str , int n , FILE * stream ); // File Position Manipulation int fseek ( FILE * stream , long int offset , int whence ); long int ftell ( FILE * stream ); void rewind ( FILE * stream ); // Standard Library #include <stdlib.h> void * malloc ( size_t size ); void * calloc ( size_t n_items , size_t size ); void * realloc ( void * ptr , size_t size ); void free ( void * ptr ); // String #include <string.h> void * memcpy ( void * dest , const void * src , size_t n ); void * memmove ( void * dest , const void * src , size_t n ); size_t strlen ( const char * str ); int strcmp ( const char * str1 , const char * str2 ); char * strcpy ( char * dest , const char * src ); char * strcat ( char * dest , const char * src ); char * strrev ( char * str ); // Character Type #include <ctype.h> int isalnum ( int c ); int isalpha ( int c ); int isdigit ( int c ); int ispunct ( int c ); int isspace ( int c ); int isupper ( int c ); int islower ( int c ); int toupper ( int c ); int tolower ( int c );","title":"Full Reference"},{"location":"Headers/full-reference/#full-reference","text":"// Standard Input Output #include <stdio.h> // Console Output int printf ( const char * format , ...); int puts ( const char * str ); // Console Input int scanf ( const char * format , ...); char * gets ( char * str ); // File Functions FILE * fopen ( const char * filename , const char * mode ); int fclose ( FILE * stream ); // File Writing size_t fwrite ( const void * ptr , size_t size , size_t nmemb , FILE * stream ); int fprintf ( FILE * stream , const char * format , ...); int fputc ( int char , FILE * stream ); // or putc int fputs ( const char * str , FILE * stream ); // File Reading size_t fread ( void * ptr , size_t size , size_t nmemb , FILE * stream ); int fscanf ( FILE * stream , const char * format , ...); int fgetc ( FILE * stream ); // or getc char * fgets ( char * str , int n , FILE * stream ); // File Position Manipulation int fseek ( FILE * stream , long int offset , int whence ); long int ftell ( FILE * stream ); void rewind ( FILE * stream ); // Standard Library #include <stdlib.h> void * malloc ( size_t size ); void * calloc ( size_t n_items , size_t size ); void * realloc ( void * ptr , size_t size ); void free ( void * ptr ); // String #include <string.h> void * memcpy ( void * dest , const void * src , size_t n ); void * memmove ( void * dest , const void * src , size_t n ); size_t strlen ( const char * str ); int strcmp ( const char * str1 , const char * str2 ); char * strcpy ( char * dest , const char * src ); char * strcat ( char * dest , const char * src ); char * strrev ( char * str ); // Character Type #include <ctype.h> int isalnum ( int c ); int isalpha ( int c ); int isdigit ( int c ); int ispunct ( int c ); int isspace ( int c ); int isupper ( int c ); int islower ( int c ); int toupper ( int c ); int tolower ( int c );","title":"Full Reference"},{"location":"Headers/stdio/","text":"stdio.h Type Definitions Typedef Datatype Description size_t unsigned int Result of the sizeof keyword. FILE object Suitable for storing information for a file stream. fpos_t object Suitable for storing any position in a file. Methods Return Method int printf ( const char * format , ... ) int puts ( const char * str ) int scanf ( const char * format , ... ) char * gets ( char * str ) FILE * fopen ( const char * filename , const char * mode ) int fclose ( FILE * stream ) size_t fwrite ( const void * ptr , size_t size , size_t nmemb , FILE * stream ) int fprintf ( FILE * stream , const char * format , ... ) int fputc ( int char , FILE * stream ) int fputs ( const char * str , FILE * stream ) size_t fread ( void * ptr , size_t size , size_t nmemb , FILE * stream ) int fscanf ( FILE * stream , const char * format , ... ) int fgetc ( FILE * stream ) char * fgets ( char * str , int n , FILE * stream ) int fseek ( FILE * stream , long int offset , int whence ) long int ftell ( FILE * stream ) void rewind ( FILE * stream ) Method Descriptions int printf ( const char * format , ... ) Sends formatted output to stdout. int puts ( const char * str ) Writes a string to stdout up to but not including the null character. A newline character is appended to the output. int scanf ( const char * format , ... ) Reads formatted input from stdin. char * gets ( char * str ) Reads a line from stdin and stores it into the string pointed to by, str . It stops when either the newline character is read or when the end-of-file is reached, whichever comes first. FILE * fopen ( const char * filename , const char * mode ) Opens the filename pointed to by filename using the given mode . Parameter Description filename string containing the name of the file to be opened. mode string containing a file access mode. mode Description \"r\" Opens a file for reading. The file must exist. \"w\" Creates an empty file for writing. If a file with the same name already exists, its content is erased and the file is considered as a new empty file. \"a\" Appends to a file. Writing operations, append data at the end of the file. The file is created if it does not exist. \"r+\" Opens a file to update both reading and writing. The file must exist. \"w+\" Creates an empty file for both reading and writing. \"a+\" Opens a file for reading and appending. int fclose ( FILE * stream ) Closes the stream. All buffers are flushed. size_t fwrite ( const void * ptr , size_t size , size_t nmemb , FILE * stream ) Writes data from the array pointed to by ptr to the given stream. int fprintf ( FILE * stream , const char * format , ... ) Sends formatted output to a stream. int fputc ( int char , FILE * stream ) Writes a character (an unsigned char) specified by the argument char to the specified stream and advances the position indicator for the stream. int fputs ( const char * str , FILE * stream ) Writes a string to the specified stream up to but not including the null character. size_t fread ( void ptr , size_t size , size_t nmemb , FILE * stream ) Reads data from the given stream into the array pointed to by ptr. int fscanf ( FILE * stream , const char * format , ... ) Reads formatted input from a stream. int fgetc ( FILE * stream ) Gets the next character (an unsigned char) from the specified stream and advances the position indicator for the stream. char * fgets ( char * str , int n , FILE * stream ) Reads a line from the specified stream and stores it into the string pointed to by str. It stops when either (n-1) characters are read, the newline character is read, or the end-of-file is reached, whichever comes first. int fseek ( FILE * stream , long int offset , int whence ) Sets the file position of the stream to the given offset. int whence Description 1 SEEK_SET Beginning of file 2 SEEK_CUR Current position of the file pointer 3 SEEK_END End of file long int ftell ( FILE * stream ) Returns the current file position of the given stream. void rewind ( FILE * stream ) Sets the file position to the beginning of the file of the given stream.","title":"stdio.h"},{"location":"Headers/stdio/#stdioh","text":"","title":"stdio.h"},{"location":"Headers/stdio/#type-definitions","text":"Typedef Datatype Description size_t unsigned int Result of the sizeof keyword. FILE object Suitable for storing information for a file stream. fpos_t object Suitable for storing any position in a file.","title":"Type Definitions"},{"location":"Headers/stdio/#methods","text":"Return Method int printf ( const char * format , ... ) int puts ( const char * str ) int scanf ( const char * format , ... ) char * gets ( char * str ) FILE * fopen ( const char * filename , const char * mode ) int fclose ( FILE * stream ) size_t fwrite ( const void * ptr , size_t size , size_t nmemb , FILE * stream ) int fprintf ( FILE * stream , const char * format , ... ) int fputc ( int char , FILE * stream ) int fputs ( const char * str , FILE * stream ) size_t fread ( void * ptr , size_t size , size_t nmemb , FILE * stream ) int fscanf ( FILE * stream , const char * format , ... ) int fgetc ( FILE * stream ) char * fgets ( char * str , int n , FILE * stream ) int fseek ( FILE * stream , long int offset , int whence ) long int ftell ( FILE * stream ) void rewind ( FILE * stream )","title":"Methods"},{"location":"Headers/stdio/#method-descriptions","text":"int printf ( const char * format , ... ) Sends formatted output to stdout. int puts ( const char * str ) Writes a string to stdout up to but not including the null character. A newline character is appended to the output. int scanf ( const char * format , ... ) Reads formatted input from stdin. char * gets ( char * str ) Reads a line from stdin and stores it into the string pointed to by, str . It stops when either the newline character is read or when the end-of-file is reached, whichever comes first. FILE * fopen ( const char * filename , const char * mode ) Opens the filename pointed to by filename using the given mode . Parameter Description filename string containing the name of the file to be opened. mode string containing a file access mode. mode Description \"r\" Opens a file for reading. The file must exist. \"w\" Creates an empty file for writing. If a file with the same name already exists, its content is erased and the file is considered as a new empty file. \"a\" Appends to a file. Writing operations, append data at the end of the file. The file is created if it does not exist. \"r+\" Opens a file to update both reading and writing. The file must exist. \"w+\" Creates an empty file for both reading and writing. \"a+\" Opens a file for reading and appending. int fclose ( FILE * stream ) Closes the stream. All buffers are flushed. size_t fwrite ( const void * ptr , size_t size , size_t nmemb , FILE * stream ) Writes data from the array pointed to by ptr to the given stream. int fprintf ( FILE * stream , const char * format , ... ) Sends formatted output to a stream. int fputc ( int char , FILE * stream ) Writes a character (an unsigned char) specified by the argument char to the specified stream and advances the position indicator for the stream. int fputs ( const char * str , FILE * stream ) Writes a string to the specified stream up to but not including the null character. size_t fread ( void ptr , size_t size , size_t nmemb , FILE * stream ) Reads data from the given stream into the array pointed to by ptr. int fscanf ( FILE * stream , const char * format , ... ) Reads formatted input from a stream. int fgetc ( FILE * stream ) Gets the next character (an unsigned char) from the specified stream and advances the position indicator for the stream. char * fgets ( char * str , int n , FILE * stream ) Reads a line from the specified stream and stores it into the string pointed to by str. It stops when either (n-1) characters are read, the newline character is read, or the end-of-file is reached, whichever comes first. int fseek ( FILE * stream , long int offset , int whence ) Sets the file position of the stream to the given offset. int whence Description 1 SEEK_SET Beginning of file 2 SEEK_CUR Current position of the file pointer 3 SEEK_END End of file long int ftell ( FILE * stream ) Returns the current file position of the given stream. void rewind ( FILE * stream ) Sets the file position to the beginning of the file of the given stream.","title":"Method Descriptions"},{"location":"Headers/stdlib/","text":"stdlib.h Methods Return Method void * malloc ( size_t size ) void * calloc ( size_t n_items , size_t size ) void * realloc ( void * ptr , size_t size ) void free ( void * ptr ) Method Descriptions void * malloc ( size_t size ) a.k.a. m emory alloc ation Dynamically allocates a single block of contiguous memory according to size , containing garbage. Returns a void pointer pointing to the first byte of allocated memory, otherwise it returns NULL if unsuccessful. void * calloc ( size_t n_items , size_t size ) a.k.a. c lear alloc ation Dynamically allocates multiple blocks of memory by n_items blocks sized according to size , containing zeroes. Returns a void pointer pointing to the first byte of allocated memory, otherwise it returns NULL if unsuccessful. void * realloc ( void * ptr , size_t size ) a.k.a. realloc ation Attempts to change the size of the memory block by size , pointed to by ptr . Newly allocated bytes are not initialized. Returns a void pointer pointing to the first byte of newly allocated memory, otherwise it returns NULL if unsuccessful. void free ( void * ptr ) Deallocates the memory previously allocated by a call to calloc, malloc, or realloc.","title":"stdlib.h"},{"location":"Headers/stdlib/#stdlibh","text":"","title":"stdlib.h"},{"location":"Headers/stdlib/#methods","text":"Return Method void * malloc ( size_t size ) void * calloc ( size_t n_items , size_t size ) void * realloc ( void * ptr , size_t size ) void free ( void * ptr )","title":"Methods"},{"location":"Headers/stdlib/#method-descriptions","text":"void * malloc ( size_t size ) a.k.a. m emory alloc ation Dynamically allocates a single block of contiguous memory according to size , containing garbage. Returns a void pointer pointing to the first byte of allocated memory, otherwise it returns NULL if unsuccessful. void * calloc ( size_t n_items , size_t size ) a.k.a. c lear alloc ation Dynamically allocates multiple blocks of memory by n_items blocks sized according to size , containing zeroes. Returns a void pointer pointing to the first byte of allocated memory, otherwise it returns NULL if unsuccessful. void * realloc ( void * ptr , size_t size ) a.k.a. realloc ation Attempts to change the size of the memory block by size , pointed to by ptr . Newly allocated bytes are not initialized. Returns a void pointer pointing to the first byte of newly allocated memory, otherwise it returns NULL if unsuccessful. void free ( void * ptr ) Deallocates the memory previously allocated by a call to calloc, malloc, or realloc.","title":"Method Descriptions"},{"location":"Headers/string/","text":"string.h Methods Return Method void * memcpy ( void * dest , const void * src , size_t n ) void * memmove ( void * dest , const void * src , size_t n ) size_t strlen ( const char * str ) int strcmp ( const char * str1 , const char * str2 ) char * strcpy ( char * dest , const char * src ) char * strcat ( char * dest , const char * src ) char * strrev ( char * str ) Method Descriptions void * memcpy ( void * dest , const void * src , size_t n ) a.k.a. mem ory c o py Copies n bytes from src to dest . It is used to copy a block of memory from one location to another. It does not check for overflow or \\ 0 , and may cause problems when src and dest addresses overlap. void * memmove ( void * dest , const void * src , size_t n ) a.k.a. mem ory move Copies n bytes from src to dest . It is used to copy a block of memory from one location to another. It copies data first from src to a buffer, then to dest , so it is safe to use when src and dest addresses overlap. size_t strlen ( const char * str ) a.k.a. str ing len gth Returns the length from a string str up to but not including \\0 . int strcmp ( const char * str1 , const char * str2 ) Compares chracters of string str1 to string str2 per index starting with the first character, until the corresponding characters differ or end of one of the strings is reached. Refer to ASCII table for reference return value condition return < 0 str1 < str2 return == 0 str1 == str2 return > 0 str1 > str2 char * strcpy ( char * dest , const char * src ) a.k.a. str ing c o py Copies the string from src to string pointer dest , Includes \\0 at the end of the string. Returns string pointer dest . char * strcat ( char * dest , const char * src ) a.k.a. str ing con cat onate Appends the string from src to the end of dest string. Returns dest string pointer. char * strrev ( char * str ) Reverses the string.","title":"string.h"},{"location":"Headers/string/#stringh","text":"","title":"string.h"},{"location":"Headers/string/#methods","text":"Return Method void * memcpy ( void * dest , const void * src , size_t n ) void * memmove ( void * dest , const void * src , size_t n ) size_t strlen ( const char * str ) int strcmp ( const char * str1 , const char * str2 ) char * strcpy ( char * dest , const char * src ) char * strcat ( char * dest , const char * src ) char * strrev ( char * str )","title":"Methods"},{"location":"Headers/string/#method-descriptions","text":"void * memcpy ( void * dest , const void * src , size_t n ) a.k.a. mem ory c o py Copies n bytes from src to dest . It is used to copy a block of memory from one location to another. It does not check for overflow or \\ 0 , and may cause problems when src and dest addresses overlap. void * memmove ( void * dest , const void * src , size_t n ) a.k.a. mem ory move Copies n bytes from src to dest . It is used to copy a block of memory from one location to another. It copies data first from src to a buffer, then to dest , so it is safe to use when src and dest addresses overlap. size_t strlen ( const char * str ) a.k.a. str ing len gth Returns the length from a string str up to but not including \\0 . int strcmp ( const char * str1 , const char * str2 ) Compares chracters of string str1 to string str2 per index starting with the first character, until the corresponding characters differ or end of one of the strings is reached. Refer to ASCII table for reference return value condition return < 0 str1 < str2 return == 0 str1 == str2 return > 0 str1 > str2 char * strcpy ( char * dest , const char * src ) a.k.a. str ing c o py Copies the string from src to string pointer dest , Includes \\0 at the end of the string. Returns string pointer dest . char * strcat ( char * dest , const char * src ) a.k.a. str ing con cat onate Appends the string from src to the end of dest string. Returns dest string pointer. char * strrev ( char * str ) Reverses the string.","title":"Method Descriptions"}]}